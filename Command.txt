git init (初始化 .git 資料夾)

git status (檢查狀態)

git add FILENAME (讓 git 追蹤檔案)

git commit FILENAME -m 'commit message' (提交改變)
git commit -a -m 'commit message (已經被追蹤的檔案跳過 staging 階段，直接提交，還未被追蹤的還是要先 git add)


git add .html (add 所以此類型檔案)
# 建立 .gitignore 檔案，裡面寫 "*.log" 這樣所有的 .log 就不會在 git add . 時被追蹤

git branch BRANCHNAME (建立分支)
git branch -d BRANCHNNAME (刪除分支)

git checkout BRANCHNAME (移轉到分支，預設名稱是 master)
git checkout FILENAME (回溯檔案到最新一次的 commit)
git checkout TAGNAME (移轉到 tag 名稱的 commit，可用 git checkout master 移轉回來)

git tag (查詢標籤)
git tag -n (查詢詳細標籤)
git tag TAGNAME (新增標籤)
git tag -am TAGNAME (新增標示標籤)
git tag -d TAGNAME (刪除標籤)

git merge BRANCHNAME (before merging the branch, use "git status" to make sure now is in the destination branch and BRANCHNAME is the name of source branch)

git stash (you have files that is staged but not committed and you need to switch the branch. in order not to mess up with the file between branches because files that not be committed will still show up in other branches even though it is created in current branch. so you can save this kind of files in stash)

git stash apply (get the stash files back)


git remote (檢查 REMOTEBRANCHNAME 基本上會顯示 origin)
git remote -v (顯示 URL)

git clone HTTPSADDRESS (將整個 Github 的 repository 複製下來)

git fetch REMOTEBRANCHNAME (pull the data from remote, any changes have been made since last fetch or clond will be added into repository but will not be merged)

git pull REMOTEBRANCHNAME (like fetch command but will merge files into current branch)

git push REMOTEBRANCHNAME LOCALBRANCHNAME (push data to remote branch and commit to local branch)

git remote add REMOTEBRANCHNAME HTTPADDRESS (add a new remote repository by providing address)

git rm -cached (將還沒被 commit 過的檔案從 staged 狀態改成 untracked。注意！！！若是已經 commit 的檔案會被整個從 repository 刪除，不能用這個指令！)

git reset HEAD (將已經在 repository 的檔案從 staged 狀態改成 untracked)

